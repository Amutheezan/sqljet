group = 'org.tmatesoft.sqljet'
version = '1.1.0-SNAPSHOT'

buildscript {
   repositories {
      mavenRepo(urls: [mavenPublicRepositoryURL]) {
           snapshotTimeout = org.gradle.api.internal.artifacts.ivyservice.GradleIBiblioResolver.ALWAYS
      }
   }
   dependencies {
      classpath 'org.tmatesoft.build:build:0.9.0-SNAPSHOT'
   }
}

def javaProjects() {
   return subprojects.findAll { it.name != 'sqljet-distribution' }
}
def exampleProjects() {
   return javaProjects().findAll { it.name.startsWith('sqljet-example-') }
}

allprojects {
   apply plugin : 'base'
   apply plugin : 'build'
}

configure(javaProjects()) {
   apply plugin : 'java'

   sourceCompatibility = 1.5
   targetCompatibility = 1.5
   configurations {
      sources
      javadocs
   }

   task sourcesJar(type: Jar) {
       description = 'Builds Java Sources Jar'
       from sourceSets.main.java.srcDirs
       classifier = 'sources'
   }

   artifacts {
       sources sourcesJar
   }
}


project(':sqljet') {
    dependencies {
        compile('org.antlr:antlr-runtime:3.1.3') {
              exclude group: 'org.antlr', module: 'stringtemplate' 
        }
        testCompile 'junit:junit:4.8.2'
        testCompile 'org.easymock:easymock:2.4'
        testCompile 'org.xerial:sqlite-jdbc:3.7.2'
    }
}
project(':sqljet-browser') {
    dependencies {
       compile project(':sqljet')
       compile 'org.netbeans.api:org-netbeans-swing-outline:RELEASE68'
    }
}
project(':sqljet-osgi') {
    dependencies {
       compile project(':sqljet')
    }
}

configure(exampleProjects()) {
    dependencies {
       compile project(':sqljet')
    }
}

project(':sqljet-distribution') {
    configurations {
       binaries
       sources
       javadocs
       examples
    }

    dependencies {
       binaries project(path: ':sqljet', configuration: 'default')
       sources project(path: ':sqljet', configuration: 'sources')
       javadocs project(path: ':sqljet', configuration : 'javadocs')

       binaries project(path: ':sqljet-browser', configuration: 'default')
       sources project(path: ':sqljet-browser', configuration: 'sources')
       exampleProjects().each {
           examples project(path: ':' + it.name, configuration: 'sources')
       }
//       examples project(path: ':sqljet-example-inventory', configuration: 'sources')
//       examples project(path: ':sqljet-example-expenses', configuration: 'sources')
    }

    task build(dependsOn: assemble) {}
    task prepareDistribution() {}

    javaProjects().each {
       project.prepareDistribution.dependsOn(it.assemble)
    }
}

